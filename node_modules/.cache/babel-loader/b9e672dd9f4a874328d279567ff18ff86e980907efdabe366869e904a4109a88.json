{"ast":null,"code":"import ECharts from 'echarts';\nconst lineDefaultOpt = {\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    bottom: 0,\n    left: 'center'\n  },\n  grid: {\n    left: 30,\n    bottom: 50,\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    axisLine: {\n      lineStyle: {\n        color: ['#666666'],\n        width: 1,\n        type: 'solid'\n      }\n    }\n  },\n  yAxis: {\n    type: 'value',\n    boundaryGap: ['0%', '20%'],\n    axisLine: {\n      lineStyle: {\n        color: ['#666666'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: '#C4C4C4',\n        width: 1,\n        type: 'dashed'\n      }\n    }\n  },\n  series: []\n};\nexport default {\n  data() {\n    return {\n      date: [],\n      loading: false,\n      doubleLineOption: lineDefaultOpt,\n      selectGatheringTime: []\n    };\n  },\n  mounted() {\n    this.getDoubleLineData();\n  },\n  methods: {\n    // 返回最近七天的日期\n    getDateBeforeSevenDays() {\n      let dateItem = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000); // 使用当天时间戳减去以前的时间毫秒（小时*分*秒*毫秒）\n      let y = dateItem.getFullYear(); // 获取年份\n      let m = dateItem.getMonth() + 1; // 获取月份js月份从0开始，需要+1\n      let d = dateItem.getDate(); // 获取日期\n      m = this.addDate0(m); // 给为单数的月份补零\n      d = this.addDate0(d); // 给为单数的日期补零\n      return y + '-' + m + '-' + d;\n    },\n    // 获取最近七天的日期\n    getDate() {\n      let now = new Date();\n      let y = now.getFullYear(); // 获取年份\n      let m = now.getMonth() + 1; // 获 取月份js月份从0开始，需要+1\n      let d = now.getDate(); // 获取日期\n      return y + '-' + m + '-' + d;\n    },\n    // 给日期加0\n    addDate0(time) {\n      if (time.toString().length === 1) {\n        time = '0' + time.toString();\n      }\n      return time;\n    },\n    async getWeather(dates) {\n      this.date = dates;\n      // const { data: res } = await this.$http.get('weather/' + dates[0] + '/' + dates[1])\n      // console.log(res)\n      const {\n        data: res\n      } = await this.$http.get('weather/' + dates[0] + '/' + dates[1]);\n      console.log(res);\n      if (res.code !== 0) {\n        return this.$message.error('获取折线图数据失败！');\n      }\n      const arr = res.data.temperatureList;\n      const arr2 = res.data.dateList;\n      const list = [{\n        name: '温度',\n        type: 'line',\n        symbol: 'circle',\n        symbolSize: [5, 5],\n        data: arr\n      }, {\n        name: '订单数',\n        type: 'line',\n        symbol: 'circle',\n        symbolSize: [5, 5],\n        data: arr2\n      }];\n      this.doubleLineOption.series = list;\n      this.doubleLineOption.xAxis.data = arr2;\n      this.eChartsInit('home_DoubleLine', 'light', this.doubleLineOption);\n    },\n    calendarChange(dates) {\n      // 记录选择的开始日期，方便后面根据开始日期限定结束日期\n      let hasSelectDate = dates !== null && dates.length > 0;\n      this.startDate = hasSelectDate ? dates[0] : null;\n    },\n    eChartsInit(domId, theme, opt) {\n      ECharts.init(document.getElementById(domId), theme).setOption(opt);\n      window.addEventListener('resize', () => {\n        ECharts.init(document.getElementById(domId), theme).resize();\n      });\n    },\n    async getDoubleLineData() {\n      // 获取最近七天的时间\n      const {\n        data: res\n      } = await this.$http.get('weather/' + this.getDateBeforeSevenDays() + '/' + this.getDate());\n      // const { data: res } = await this.$http.get('weather/2024-03-17 1:00:00/2024-03-17 19:00:00')\n      console.log(res);\n      if (res.code !== 0) {\n        return this.$message.error('获取折线图数据失败！');\n      }\n      const arr = res.data.temperatureList;\n      const arr2 = res.data.dateList;\n      const list = [{\n        name: '温度',\n        type: 'line',\n        symbol: 'circle',\n        symbolSize: [5, 5],\n        data: arr\n      }, {\n        name: '订单数',\n        type: 'line',\n        symbol: 'circle',\n        symbolSize: [5, 5],\n        data: arr2\n      }];\n      this.doubleLineOption.series = list;\n      this.doubleLineOption.xAxis.data = arr2;\n      this.eChartsInit('home_DoubleLine', 'light', this.doubleLineOption);\n    }\n  }\n};","map":{"version":3,"names":["ECharts","lineDefaultOpt","tooltip","trigger","legend","bottom","left","grid","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","axisLine","lineStyle","color","width","yAxis","splitLine","show","series","data","date","loading","doubleLineOption","selectGatheringTime","mounted","getDoubleLineData","methods","getDateBeforeSevenDays","dateItem","Date","getTime","y","getFullYear","m","getMonth","d","getDate","addDate0","now","time","toString","length","getWeather","dates","res","$http","get","console","log","code","$message","error","arr","temperatureList","arr2","dateList","list","name","symbol","symbolSize","eChartsInit","calendarChange","hasSelectDate","startDate","domId","theme","opt","init","document","getElementById","setOption","window","addEventListener","resize"],"sources":["src/components/WeatherShow.vue"],"sourcesContent":["<template >\r\n\t<div class=\"home-index-box\" v-loading=\"loading\">\r\n\t\t<div class=\"graph-doubleLine-warp\">\r\n\t\t\t<el-row :gutter=\"20\">\r\n\t\t\t\t<el-col :span=\"16\">\r\n\t\t\t\t\t<div class=\"selection-box\">\r\n\t\t\t\t\t\t气温趋势图:\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</el-col>\r\n\t\t\t\t<el-col :span=\"8\">\r\n\t\t\t\t\t<div class=\"selection-box\">\r\n\t\t\t\t\t\t<el-date-picker @change=\"getWeather($event)\" @calendar-change=\"calendarChange\" v-model=\"selectGatheringTime\" type=\"datetimerange\" range-separator=\"至\"\r\n\t\t\t\t\t\t\tstart-placeholder=\"开始日期\" end-placeholder=\"结束日期\" value-format=\"yyyy-MM-dd HH:mm:ss\">\r\n\t\t\t\t\t\t</el-date-picker>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</el-col>\r\n\t\t\t</el-row>\r\n\t\t\t<el-row :gutter=\"20\">\r\n\t\t\t\t<el-col :span=\"24\">\r\n\t\t\t\t\t<div id=\"home_DoubleLine\" style=\"width: 100%;height: 250px;\"></div>\r\n\t\t\t\t</el-col>\r\n\t\t\t</el-row>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nimport ECharts from 'echarts'\r\n\r\nconst lineDefaultOpt = {\r\n\ttooltip: {\r\n\t\ttrigger: 'axis'\r\n\t},\r\n\tlegend: {\r\n\t\tbottom: 0,\r\n\t\tleft: 'center'\r\n\t},\r\n\tgrid: {\r\n\t\tleft: 30,\r\n\t\tbottom: 50,\r\n\t\tcontainLabel: true\r\n\t},\r\n\ttoolbox: {\r\n\t\tfeature: {\r\n\t\t\tsaveAsImage: {}\r\n\t\t}\r\n\t},\r\n\txAxis: {\r\n\t\ttype: 'category',\r\n\t\tboundaryGap: false,\r\n\t\taxisLine: {\r\n\t\t\tlineStyle: {\r\n\t\t\t\tcolor: ['#666666'],\r\n\t\t\t\twidth: 1,\r\n\t\t\t\ttype: 'solid'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tyAxis: {\r\n\t\ttype: 'value',\r\n\t\tboundaryGap: ['0%', '20%'],\r\n\t\taxisLine: {\r\n\t\t\tlineStyle: {\r\n\t\t\t\tcolor: ['#666666'],\r\n\t\t\t\twidth: 1,\r\n\t\t\t\ttype: 'solid'\r\n\t\t\t}\r\n\t\t},\r\n\t\tsplitLine: {\r\n\t\t\tshow: true,\r\n\t\t\tlineStyle: {\r\n\t\t\t\tcolor: '#C4C4C4',\r\n\t\t\t\twidth: 1,\r\n\t\t\t\ttype: 'dashed'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tseries: []\r\n}\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t  date: [],\r\n\t\t\tloading: false,\r\n\t\t\tdoubleLineOption: lineDefaultOpt,\r\n\t\t\tselectGatheringTime: []\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\tthis.getDoubleLineData()\r\n\t},\r\n\tmethods: {\r\n\t  // 返回最近七天的日期\r\n    getDateBeforeSevenDays() {\r\n      let dateItem = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000);\t// 使用当天时间戳减去以前的时间毫秒（小时*分*秒*毫秒）\r\n      let y = dateItem.getFullYear();\t// 获取年份\r\n      let m = dateItem.getMonth() + 1;\t// 获取月份js月份从0开始，需要+1\r\n      let d = dateItem.getDate();\t// 获取日期\r\n      m = this.addDate0(m);\t// 给为单数的月份补零\r\n      d = this.addDate0(d);\t// 给为单数的日期补零\r\n      return y + '-' + m + '-' + d;\r\n    },\r\n    // 获取最近七天的日期\r\n    getDate() {\r\n      let now = new Date();\r\n      let y = now.getFullYear();\t// 获取年份\r\n      let m = now.getMonth() + 1;\t// 获 取月份js月份从0开始，需要+1\r\n      let d = now.getDate();\t// 获取日期\r\n      return y + '-' + m + '-' + d;\r\n    },\r\n    // 给日期加0\r\n    addDate0(time) {\r\n      if (time.toString().length === 1) {\r\n        time = '0' + time.toString();\r\n      }\r\n      return time;\r\n    },\r\n    async getWeather(dates) {\r\n\t\t  this.date = dates\r\n\t\t\t// const { data: res } = await this.$http.get('weather/' + dates[0] + '/' + dates[1])\r\n\t\t\t// console.log(res)\r\n      const { data: res } = await this.$http.get('weather/' + dates[0] + '/' + dates[1])\r\n      console.log(res)\r\n      if (res.code !== 0) {\r\n        return this.$message.error('获取折线图数据失败！')\r\n      }\r\n      const arr = res.data.temperatureList\r\n      const arr2 = res.data.dateList\r\n      const list = [{\r\n        name: '温度',\r\n        type: 'line',\r\n        symbol: 'circle',\r\n        symbolSize: [5, 5],\r\n        data: arr\r\n      },\r\n        {\r\n          name: '订单数',\r\n          type: 'line',\r\n          symbol: 'circle',\r\n          symbolSize: [5, 5],\r\n          data: arr2\r\n        }]\r\n      this.doubleLineOption.series = list\r\n      this.doubleLineOption.xAxis.data = arr2\r\n      this.eChartsInit('home_DoubleLine', 'light', this.doubleLineOption)\r\n\t\t},\r\n    calendarChange(dates) {\r\n      // 记录选择的开始日期，方便后面根据开始日期限定结束日期\r\n      let hasSelectDate = dates !== null && dates.length > 0\r\n      this.startDate = hasSelectDate ? dates[0] : null\r\n    },\r\n\r\n\t\teChartsInit(domId, theme, opt) {\r\n\t\t\tECharts.init(document.getElementById(domId), theme).setOption(opt)\r\n\t\t\twindow.addEventListener('resize', () => {\r\n\t\t\t\tECharts.init(document.getElementById(domId), theme).resize()\r\n\t\t\t})\r\n\t\t},\r\n\r\n\t\tasync getDoubleLineData() {\r\n\t\t  // 获取最近七天的时间\r\n      const { data: res } = await this.$http.get('weather/' + this.getDateBeforeSevenDays() + '/' + this.getDate())\r\n      // const { data: res } = await this.$http.get('weather/2024-03-17 1:00:00/2024-03-17 19:00:00')\r\n\t\t\tconsole.log(res)\r\n\t\t\tif (res.code !== 0) {\r\n\t\t\t\treturn this.$message.error('获取折线图数据失败！')\r\n\t\t\t}\r\n\t\t\tconst arr = res.data.temperatureList\r\n\t\t\tconst arr2 = res.data.dateList\r\n\t\t\tconst list = [{\r\n\t\t\t\tname: '温度',\r\n\t\t\t\ttype: 'line',\r\n\t\t\t\tsymbol: 'circle',\r\n\t\t\t\tsymbolSize: [5, 5],\r\n\t\t\t\tdata: arr\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '订单数',\r\n\t\t\t\ttype: 'line',\r\n\t\t\t\tsymbol: 'circle',\r\n\t\t\t\tsymbolSize: [5, 5],\r\n\t\t\t\tdata: arr2\r\n\t\t\t}]\r\n\t\t\tthis.doubleLineOption.series = list\r\n\t\t\tthis.doubleLineOption.xAxis.data = arr2\r\n\t\t\tthis.eChartsInit('home_DoubleLine', 'light', this.doubleLineOption)\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n\r\n<style lang=\"sass\" scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}